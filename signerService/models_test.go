package main

import (
	"encoding/json"
	"testing"

	log "github.com/sirupsen/logrus"
)

//Test ETHAccounts structure for consistency marshalling and unmarshalling
var ethAccount = ETHAccounts{
	"someAddress",
	"0.1",
	make(map[string]string),
}

func TestETHAccountStruct(t *testing.T) {
	jsonbytes, err := json.Marshal(ethAccount)
	if err != nil {
		t.Error("Error marshalling ethAccount")
	}
	var ethAccount2 ETHAccounts
	err = json.Unmarshal(jsonbytes, &ethAccount2)
	if err != nil {
		t.Error("Error unmarshalling Basic Tx")
	}

	if ethAccount.Address != ethAccount2.Address {
		t.Error("JSON conversion error")
	}

	jsonString := `{"address":"someAddress","balance":"0.1","erc20Balances":{}}`
	var ethAccount3 ETHAccounts
	err = json.Unmarshal([]byte(jsonString), &ethAccount3)
	if err != nil {
		t.Error("Error unmarshalling Basic Tx")
	}

	if ethAccount.Address != ethAccount3.Address {
		t.Error("JSON conversion error")
	}

}

//Test KeyShare structure for consistency marshalling and unmarshalling
func TestKeyShareStruct(t *testing.T) {
	jsonString := `{
		"ID":"000000000000000000000000",
		"UserId":"user103",
		"TokenId":"ETH",
		"AccountName":"Account1",
		"BlockchainId":"ETH",
		"ShareData":{
		   "PK":"{\"CurveName\":\"secp256k1\",\"X\":68254944053905039198558948763019128610433180900863720686248897560479896015898,\"Y\":19100676805482513815614224347024929473909611021961804499766713989383665499265}",
		   "Share":"{\"Identifier\":1,\"Value\":108224674083800162833364756262671898417316132922327435180088426836095545189254,\"Point\":{\"CurveName\":\"secp256k1\",\"X\":87431458534917119538498505624450117301656663580130627604243368680915387837371,\"Y\":110899515269308268271033348928261493664530112931952954647670344622672112022923}}",
		   "PubShares":{
			  "1":"{\"Point\":{\"CurveName\":\"secp256k1\",\"X\":87431458534917119538498505624450117301656663580130627604243368680915387837371,\"Y\":110899515269308268271033348928261493664530112931952954647670344622672112022923}}",
			  "2":"{\"Point\":{\"CurveName\":\"secp256k1\",\"X\":42688913616504564736280557537168334474811905719249694216743716738395755934203,\"Y\":55686928346012578642908343715476173994595284984255556342344193967847613729140}}",
			  "3":"{\"Point\":{\"CurveName\":\"secp256k1\",\"X\":45034988315211764786202207372437463588471406446571612142216710733053188330387,\"Y\":59817921796880403020577193325058665326089072523100495378031564660353389478306}}"
		   },
		   "PaillierKey":"{\"N\":24384202063179049810099301163102066035597813262525686728215850455703603428394877345429472425838827180458148769458550319436092493932295189204615291588875618065830541492564866503939921216496100111057823359158390337943247318530665749072703177462500137145915187533949748713382635096832336765553581470189372344791425718114273174109451225984945176045097644492677499225923299336698141383746992513340723969765196516064230564287104699306514896329658435761600872565078151009023973719805232525592374236182783114174010791308465125790224561804780062742762516952205522073147948943569066433749109715995546882089143941996108658932349,\"Lambda\":12192101031589524905049650581551033017798906631262843364107925227851801714197438672714736212919413590229074384729275159718046246966147594602307645794437809032915270746282433251969960608248050055528911679579195168971623659265332874536351588731250068572957593766974874356691317548416168382776790735094686172395556625513920124816394890582412723050386083572333441417763996028470583530529860327708102299189577265157921675254947238566981823703017253963734269982921560074257661022091459384127268062725203477457540734663602260857965073414341441024566117293880078690056222239208688598780918597421685400265305009694650509662782,\"Totient\":24384202063179049810099301163102066035597813262525686728215850455703603428394877345429472425838827180458148769458550319436092493932295189204615291588875618065830541492564866503939921216496100111057823359158390337943247318530665749072703177462500137145915187533949748713382635096832336765553581470189372344791113251027840249632789781164825446100772167144666882835527992056941167061059720655416204598379154530315843350509894477133963647406034507927468539965843120148515322044182918768254536125450406954915081469327204521715930146828682882049132234587760157380112444478417377197561837194843370800530610019389301019325564,\"U\":20233629029853385072128518969519575811053355804839457032323529966489015228125179656788395957972565857660913992426595866738148454375971240443661659856813642821979449784793622271006071919004776850738504710237532404120971812623146665741689634306619054978019288613889866947522193468770308886710168451794427826724022458223775071408019974973461976809139469666399891402674388204885552871236805024839370748826341956962120939019205344970273528972376239093342346818593707532372568981611233028672964785380432749371101527019562904479973179715327093802882672521734726817642037105663298749452066482919442711160465148618268093229515}",
		   "PubKeys":{
			  "1":"{\"N\":24384202063179049810099301163102066035597813262525686728215850455703603428394877345429472425838827180458148769458550319436092493932295189204615291588875618065830541492564866503939921216496100111057823359158390337943247318530665749072703177462500137145915187533949748713382635096832336765553581470189372344791425718114273174109451225984945176045097644492677499225923299336698141383746992513340723969765196516064230564287104699306514896329658435761600872565078151009023973719805232525592374236182783114174010791308465125790224561804780062742762516952205522073147948943569066433749109715995546882089143941996108658932349}",
			  "2":"{\"N\":24104369939184219419157877324590973547065398816726411827378876101755506996379559897474674970945876204183481396150958127021824759224980154963958645213310597252277623545644853339391314524198339937509709297059503946171619511662358200914383417842336719883480363742570975223824500637109915729680029430460166863890274287833998046701716286159119247305501057439877890818500941740118152313461089454144423594520278123073247444973088678607750382402775074917917681014448007570009314873111156008397466454903701529325460888567231414050382316263503607128752662401948049553762364793112622276190167316495291228507116125418830293001993}",
			  "3":"{\"N\":19839264670484852524862981069299257815917144424061679435252023970503851949412574561119864211353836984847121788431101320100769772445408575344558106455856125130300373182808046016500659636394571480553151968678153932908302202354157303528454544287376917466946582824050748406680658459919163347578307491721474537102292909679154384315725493991462820360770086211613674318842588718734281640912434277560379551568300929576114105472522891725502119999145178106946069489762377018786344306753837072165249049443843034435217674858439092913166584031797323538453833934083519986824945157566470320673050136682294800384719915034335292944721}"
		   }
		}
	 }`
	var keyShare KeyShare
	err := json.Unmarshal([]byte(jsonString), &keyShare)
	if err != nil {
		log.Error("Error unmarshalling json:", err)
		t.Error("Error unmarshalling Basic Tx")
	}

	if keyShare.UserId != "user103" {
		t.Error("JSON conversion error")
	}

}
