package main

import (
	"encoding/json"
	"os"
	"testing"

	log "github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/mongo"
)

func TestWriteAndReadKeyShare(t *testing.T) {
	jsonString := `{
		"ID":"000000000000000000000000",
		"UserId":"user103",
		"TokenId":"ETH",
		"AccountName":"Account1",
		"BlockchainId":"ETH",
		"ShareData":{
		   "PK":"{\"CurveName\":\"secp256k1\",\"X\":68254944053905039198558948763019128610433180900863720686248897560479896015898,\"Y\":19100676805482513815614224347024929473909611021961804499766713989383665499265}",
		   "Share":"{\"Identifier\":1,\"Value\":108224674083800162833364756262671898417316132922327435180088426836095545189254,\"Point\":{\"CurveName\":\"secp256k1\",\"X\":87431458534917119538498505624450117301656663580130627604243368680915387837371,\"Y\":110899515269308268271033348928261493664530112931952954647670344622672112022923}}",
		   "PubShares":{
			  "1":"{\"Point\":{\"CurveName\":\"secp256k1\",\"X\":87431458534917119538498505624450117301656663580130627604243368680915387837371,\"Y\":110899515269308268271033348928261493664530112931952954647670344622672112022923}}",
			  "2":"{\"Point\":{\"CurveName\":\"secp256k1\",\"X\":42688913616504564736280557537168334474811905719249694216743716738395755934203,\"Y\":55686928346012578642908343715476173994595284984255556342344193967847613729140}}",
			  "3":"{\"Point\":{\"CurveName\":\"secp256k1\",\"X\":45034988315211764786202207372437463588471406446571612142216710733053188330387,\"Y\":59817921796880403020577193325058665326089072523100495378031564660353389478306}}"
		   },
		   "PaillierKey":"{\"N\":24384202063179049810099301163102066035597813262525686728215850455703603428394877345429472425838827180458148769458550319436092493932295189204615291588875618065830541492564866503939921216496100111057823359158390337943247318530665749072703177462500137145915187533949748713382635096832336765553581470189372344791425718114273174109451225984945176045097644492677499225923299336698141383746992513340723969765196516064230564287104699306514896329658435761600872565078151009023973719805232525592374236182783114174010791308465125790224561804780062742762516952205522073147948943569066433749109715995546882089143941996108658932349,\"Lambda\":12192101031589524905049650581551033017798906631262843364107925227851801714197438672714736212919413590229074384729275159718046246966147594602307645794437809032915270746282433251969960608248050055528911679579195168971623659265332874536351588731250068572957593766974874356691317548416168382776790735094686172395556625513920124816394890582412723050386083572333441417763996028470583530529860327708102299189577265157921675254947238566981823703017253963734269982921560074257661022091459384127268062725203477457540734663602260857965073414341441024566117293880078690056222239208688598780918597421685400265305009694650509662782,\"Totient\":24384202063179049810099301163102066035597813262525686728215850455703603428394877345429472425838827180458148769458550319436092493932295189204615291588875618065830541492564866503939921216496100111057823359158390337943247318530665749072703177462500137145915187533949748713382635096832336765553581470189372344791113251027840249632789781164825446100772167144666882835527992056941167061059720655416204598379154530315843350509894477133963647406034507927468539965843120148515322044182918768254536125450406954915081469327204521715930146828682882049132234587760157380112444478417377197561837194843370800530610019389301019325564,\"U\":20233629029853385072128518969519575811053355804839457032323529966489015228125179656788395957972565857660913992426595866738148454375971240443661659856813642821979449784793622271006071919004776850738504710237532404120971812623146665741689634306619054978019288613889866947522193468770308886710168451794427826724022458223775071408019974973461976809139469666399891402674388204885552871236805024839370748826341956962120939019205344970273528972376239093342346818593707532372568981611233028672964785380432749371101527019562904479973179715327093802882672521734726817642037105663298749452066482919442711160465148618268093229515}",
		   "PubKeys":{
			  "1":"{\"N\":24384202063179049810099301163102066035597813262525686728215850455703603428394877345429472425838827180458148769458550319436092493932295189204615291588875618065830541492564866503939921216496100111057823359158390337943247318530665749072703177462500137145915187533949748713382635096832336765553581470189372344791425718114273174109451225984945176045097644492677499225923299336698141383746992513340723969765196516064230564287104699306514896329658435761600872565078151009023973719805232525592374236182783114174010791308465125790224561804780062742762516952205522073147948943569066433749109715995546882089143941996108658932349}",
			  "2":"{\"N\":24104369939184219419157877324590973547065398816726411827378876101755506996379559897474674970945876204183481396150958127021824759224980154963958645213310597252277623545644853339391314524198339937509709297059503946171619511662358200914383417842336719883480363742570975223824500637109915729680029430460166863890274287833998046701716286159119247305501057439877890818500941740118152313461089454144423594520278123073247444973088678607750382402775074917917681014448007570009314873111156008397466454903701529325460888567231414050382316263503607128752662401948049553762364793112622276190167316495291228507116125418830293001993}",
			  "3":"{\"N\":19839264670484852524862981069299257815917144424061679435252023970503851949412574561119864211353836984847121788431101320100769772445408575344558106455856125130300373182808046016500659636394571480553151968678153932908302202354157303528454544287376917466946582824050748406680658459919163347578307491721474537102292909679154384315725493991462820360770086211613674318842588718734281640912434277560379551568300929576114105472522891725502119999145178106946069489762377018786344306753837072165249049443843034435217674858439092913166584031797323538453833934083519986824945157566470320673050136682294800384719915034335292944721}"
		   }
		}
	 }`
	var keyShare KeyShare
	err := json.Unmarshal([]byte(jsonString), &keyShare)
	if err != nil {
		t.Error("Error unmarshalling Basic Tx")
	}

	err = writeECDSAShare(keyShare)
	if err != nil {
		t.Error("Error writing keyshare")
	}

	keyshare2, err := readECDSAShare("user103", "ETH", "Account1")
	if err != nil {
		t.Error("Error reading keyshare")
	}

	if keyShare.ShareData.PK != keyshare2.ShareData.PK {
		t.Error("Keyshare values do not match")
	}
}

func TestWriteAndReadTxState(t *testing.T) {
	var DB *mongo.Database = ConnectDB()
	//Mongo DB TX Collection
	TxCollection, ok := os.LookupEnv("MONGODB_COLLECTION")
	if !ok {
		log.Fatal("missing environment variable: MONGODB_COLLECTION")
	}

	txCollection := DB.Collection(TxCollection)
	jsonString := `{
		"ID":"000000000000000000000000",
		"messageHash" : "O1dPqMhuyeny1ngVNWkyDCh82Du7u2NE3VYWC9FJfl3Y=",
		"state" : "{\"ProofParams\":{\"N\":\"135817986946410153263607521492868157288929876347703239389804036854326452848342067707805833332721355089496671444901101084429868705550525577068432132709786157994652561102559125256427177197007418406633665154772412807319781659630513167839812152507439439445572264448924538846645935065905728327076331348468251587961\",\"H1\":\"130372793360787914947629694846841279927281520987029701609177523587189885120190605946568222485341643012763305061268138793179515860485547361500345083617939280336315872961605437911597699438598556875524679018909165548046362772751058504008161659270331468227764192850055032058007664070200355866555886402826731196521\",\"H2\":\"44244046835929503435200723089247234648450309906417041731862368762294548874401406999952605461193318451278897748111402857920811242015075045913904246368542432908791195758912278843108225743582704689703680577207804641185952235173475863508072754204128218500376538767731592009803034641269409627751217232043111126391\"},\"MsgHash\":null,\"Cosigners\":{\"1\":true,\"2\":true},\"Ki\":\"56145555625659496597868336644513276270188372798942044648794391645315854931920\",\"Ggammai\":\"93035675637385740279798270869926998781111637392696483569924480229008703278521\",\"Gammai\":{\"CurveName\":\"secp256k1\",\"X\":12927783427787545548945093211839155777402996238257299856506295930868263013933,\"Y\":99990710029645908592479575393293118651300037368005858951815286282924475890573},\"Ci\":null,\"Di\":{\"Msg\":\"HJTdug0RRZNAY2b86eynEOxbzgZjmpB2AUy/Rz6Lzi3dELx+iSBiR87+jVYh0SHUJQfgOTY/fA9dy1nZoGE7jQ==\",\"R\":[75,1,252,247,231,20,166,110,129,107,50,22,222,221,108,247,248,56,200,67,99,216,225,85,177,111,123,165,108,240,80,105]},\"Cci\":\"2318991568973213936820445097039866257859342380862979460566432018714702407671735878020505190700830198529036942452875905425754966592341265762912324143167669634702178292055871518242942110262042526137722512681851394787434107166095383031393199841911294250073937733954110953645650612221332929696735300956689883002730303043989772257192249095765461988932597069230720272339461675716986345678521908953849895349898788680332189545150532261095675267227462947239880947004600376587453196819491839917249444339407475337197463621516269362278551505667081506329015015898534166470721801814338206759657908744734795413597206908719299446435295433275498901739413207525149750549662315645084008980798020054537007297156805818934098408157900497587348531671803534424917493529739356455938629030572472523017093257501639957511692303375055652395683281660519379453107483702180032103333443403981103850954315638674533580746158220417986000723576584206954233227802009635306215906194741056416122055143009212567617552064120788175397155263830651074044489585391953475669495306701545720433790550697400903474260146941628523650192580843495780807218090497543244405330487891895730993801220932433778233993564077281791883215295899453051975594371598798207785213036395752538933829019085\",\"Rri\":\"29454167114114436520212141832230311467526222959889586377245734319458343712608655449732566578887302562510843311095447598752508856558826997187720336104916363086918693936278499930695374106051373203844909842997289223492013828087265362901631723823630444165760788721584989951797766102142758116582408871207856761874913650662492490382521152541113170366339308889746402712345768656387931669512035124582587936198465711640447442371556355639355086179442566203240482031913405154006047533887649614247700081244796991210840024351445191415282963571625611944393564742703040749540292537378766039596267184454119934217767672526451994534098\",\"Ccj\":{\"1\":\"305753767949235186541732935582857129131037443551498297770224840023681176669239035472384896494868869861617705262636202875065884108690177082488434025466574119524340781232658144778428642017469649630449291150952050086291307556348143851245793444243553935533399103395107041722021266882725823499543860362022052587226078427693222598155993540591676422582649894379030222876043770169333317912902535426732662979463440278778416003030739883872273334092881451758560344133964737919425157515974493506196122670952252583222778922260504726159837437756606954532972428232900500276301404478019272598095310812463171693768006356784682011844918307018385266690543167441932747244743617545251795309130285479979726992745859601145800205730517379546768291250633611408690943496740856435904118497094799371593235844519496631730220618036128731199480860471823306176171157437487191978547195687841971981875827210125175862625088636835733809630818245812945400835210312426619207977364151776998049514724759109084645813749570589841083273526273598952342245781886361659447168111247538062956301630062375365635440512865932845307756228587677636337921181101277405347042394502109436052635785342029839780379982932214921984714004307188747618684175413058040467395953696989530186991582420\",\"2\":\"53952028182333089295380290710482212854823187617138705555086405505258081752283182522124325773592883338984463954533403386097724900586526919579373940550201146108233737272560363337072144048738529859973485265203114413001033895764861469623026736883141005667827619862963768852026507113275308438418261058347044870055378991445658275394957912806414013762495746201154396552891595429843862507250888810096580283265204781219339111300430838208921099557782800047614619715000087231618214455198765439159920930285312676388276589713383567286803746878817897558420970291071731089194004653555011546284351296377909864189937892989815024224608897680867462209774329389526212089900258996009421005603222595722631704851268507146566989763218894267669089569638840208539952292848147440677683265082075618564555741690632541605651709923972630544704262424080513206647741188479682606679859340337368115782398025269205892788139996816052315189136963613385947580671388030160815886351298992775576980505572078668234578745819069678052776973444595516195317400981510264705391708939635834261046324341277307371661572172660355017674804712375377399655687949531682245976590799183327675213741173653098388947552292071116684717874165479615707394743732900945143357391937893235333809732147\"},\"Cj\":{\"1\":\"ylXAAug13WOgSHOMfQN2OufGd1cTtXE4Wks0LAKGL2g=\",\"2\":\"FpbzVix3MIL6xh9awrM5YfY/mhX0mg2ldqEZESBNjUk=\"},\"Betaj\":{\"1\":90235364880961827911761112434147193250488978112183729694790786585905703114657,\"2\":27631042048213785985825678121540701967032616115984878167400207799427375177402},\"Vuj\":{\"1\":14572004019561769613038008298794847609820569336406929055620243134418416313560,\"2\":13597972242033152438579309991803653083498455324258088293858984919729915541225},\"Pks\":{\"1\":{\"N\":17536529458755970789177968347823277164229570189913585413793326852497207960827060523309327423968982214604569495906666626482633665906120427187495196046809479120497830958671423972597622334823519047864198372899188850821383356028620946853844315597146213642701215652168545881207741687555011803298104502579140215353709269114867368937287171425982231279352870321181800751262646671629985468461138027159672812134357906353662448844969294491864468148562797398710526048243725360598867873244696561585377683880774119113943122710056991742512028315876115272760222469167042910283289265489514502365028259651980254597735708740100524524529},\"2\":{\"N\":11546149342033601413657670601253907434919047358628746748940772597071523506045019851936735921603236527158776526607834557660484848161543816092538542452041830739926912282564447161273514023932202156304332215165437912892581359836845812163811298186578547623090683984859643781428253163872513166089293825463420185512691422634354962257416316244603383771869836750347898001387527924498316094729848999938183780995134296267448900588430097398050915291652379935021105680972985386012199342616062677244548772420971074394897453890980150035897635125154454846887103137672056840107803846785869276193634876011400986741286474948762095028541},\"3\":{\"N\":59901066707331642551190466985521885974386847528602091863274191295907229410041850337334765094034503555072461665078771110227922068078398202467428454971093222003009792111686898774431161516269147834692466640395620690810862410080991759572888225718678359842245779594975050554743864049666461551752781117874689640428017106479317951037674212907132574349948346894081838014300915381189232080552545935651620227615669161911473048064901307732084307878301939318313607240711486022457981443317711955407795450021910051783367398346540796726536313498767398966227347749154797196290921767832355719184453758140212010882614103223074563411541}},\"Deltai\":\"85009735670350611790243100217815969152144560669870665067091932940005386548430\",\"Sigmai\":\"8537803414990580971727168860339747228902309300135467114704162274635470278254\",\"Delta\":\"65247652549326157470233850986085023552055598968514834073927514683416367141572\",\"Rr\":\"107239395977426023575503341670590056361183595893224354121529197923495582940907\",\"Rbari\":{\"CurveName\":\"secp256k1\",\"X\":113022761129576734972586428922866947349793370015368103858707185767886488004208,\"Y\":26778631499886293556594945371869111458992815738078783742764275361258672707550},\"Rbark\":{\"CurveName\":\"secp256k1\",\"X\":107709470656395159439755105919661062540014906217132773791843729231065575689409,\"Y\":24073794517402241404692471321548892572237595864298903133982649598969897457983},\"R\":{\"CurveName\":\"secp256k1\",\"X\":107239395977426023575503341670590056361183595893224354121529197923495582940907,\"Y\":64866431028342252069832420369511022695773376700846195837882370979699280807866},\"Si\":\"\"}",
		"status" : "round5",
		"userId" : "userxx900"
	}`
	var txState TXState
	err := json.Unmarshal([]byte(jsonString), &txState)
	if err != nil {
		t.Error("Error unmarshalling Basic Tx")
	}

	_, err = writeState(txState.State, txState.MessageHash, txState.Status, txState.UserId, txCollection)
	if err != nil {
		t.Error("Error writing tx state")
	}

	txstate2, err := readState(txState.MessageHash, txState.UserId, txCollection)
	if err != nil {
		t.Error("Error reading tx state")
	}

	if txState.MessageHash != txstate2.MessageHash {
		t.Error("TxState values do not match")
	}

	err = deleteState(txState.MessageHash, txState.UserId, txCollection)
	if err != nil {
		t.Error("Error deleting tx state")
	}
}

func TestWriteAndReadUserAccounts(t *testing.T) {
	var DB *mongo.Database = ConnectDB()
	userCollection := DB.Collection("UserCollection")
	err := createAccountRecord("testId5", "testBlockchain", "testAccount", "testAddress", userCollection)
	if err != nil {
		t.Error("Error writing tx state")
	}

	accounts, err := readAccountRecords("testId5", "testBlockchain", userCollection)
	if err != nil {
		t.Error("Error reading keyshare")
	}

	if len(accounts) < 1 {
		t.Error("One account should exist")
	}

	if accounts[0].AccountName != "testAccount" {
		t.Error("One account should exist")
	}

	err = deleteAccount("testId5", "testBlockchain", "testAccount", userCollection)
	if err != nil {
		t.Error("Error deleting account")
	}
}
